{"version":3,"sources":["store/currentTodo.ts","store/loading.ts","store/index.ts","api.ts","Filter.ts","components/Loader/Loader.tsx","components/TodoFilter/TodoFilter.tsx","components/TodoList/TodoList.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","payload","type","selectors","state","loading","todo","rootReducer","combineReducers","action","selectedTodo","store","createStore","composeWithDevTools","applyMiddleware","thunk","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Filter","Loader","className","TodoFilter","onSaveOption","onSaveQuery","React","useState","word","setWord","useEffect","onChange","event","target","value","all","active","completed","placeholder","style","pointerEvents","classNames","length","onClick","TodoList","todos","dispatch","useDispatch","useSelector","map","id","title","TodoModal","isLoading","setIsLoading","user","setUser","userId","userInfo","href","name","App","setTodos","visibleTodos","setVisibleTodos","selectFilter","setSelectFilter","searchQuery","setSearchQuery","isLoadedTodos","todoList","loadingActions","findTitle","params","toLowerCase","includes","filteredTodos","filter","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c260ee09.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\ntype SelectTodoAction = {\n  type: 'SELECT_TODO',\n  payload: Todo,\n};\n\ntype UnSelectTodoAction = {\n  type: 'UNSELECT_TODO',\n};\n\ntype SelectedTodoAction = (SelectTodoAction | UnSelectTodoAction);\n\nexport const selectedTodoReducer = (\n  selectedTodo: Todo | null = null,\n  action: SelectedTodoAction,\n) => {\n  switch (action.type) {\n    case 'SELECT_TODO':\n      return action.payload;\n\n    case 'UNSELECT_TODO':\n      return null;\n\n    default:\n      return selectedTodo;\n  }\n};\n\nexport const actions = {\n  selectTodo: (payload: Todo):SelectTodoAction => (\n    { type: 'SELECT_TODO', payload }\n  ),\n\n  unselectTodo: ():UnSelectTodoAction => ({ type: 'UNSELECT_TODO' }),\n};\n","type StartLoadingAction = {\n  type: 'START_LOADING',\n};\n\ntype FinishLoadingAction = {\n  type: 'FINISH_LOADING',\n};\n\ntype Action = (\n  StartLoadingAction\n  | FinishLoadingAction\n);\n\nexport const loadingReducer = (loading = false, action: Action) => {\n  switch (action.type) {\n    case 'START_LOADING':\n      return true;\n\n    case 'FINISH_LOADING':\n      return false;\n\n    default:\n      return loading;\n  }\n};\n\nexport const actions = {\n  startLoading: (): StartLoadingAction => ({ type: 'START_LOADING' }),\n\n  finishLoading: (): FinishLoadingAction => ({ type: 'FINISH_LOADING' }),\n};\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Todo } from '../types/Todo';\nimport { selectedTodoReducer } from './currentTodo';\nimport { loadingReducer } from './loading';\n\ntype RootState = {\n  loading: boolean;\n  todo: Todo | null;\n};\n\nexport const selectors = {\n  isLoading: (state: RootState) => state.loading,\n  getTodo: (state: RootState) => state.todo,\n};\n\nconst rootReducer = combineReducers({\n  loading: loadingReducer,\n  todo: selectedTodoReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(1000)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum Filter {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport './TodoFilter.scss';\nimport classNames from 'classnames';\nimport { Filter } from '../../Filter';\n\ntype Props = {\n  onSaveOption: (option: string) => void,\n  onSaveQuery: (searchWord: string) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  onSaveOption,\n  onSaveQuery,\n}) => {\n  const [word, setWord] = React.useState('');\n\n  React.useEffect(() => onSaveQuery(word), [word]);\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(event) => onSaveOption(event.target.value)}\n          >\n            <option value={Filter.all}>All</option>\n            <option value={Filter.active}>Active</option>\n            <option value={Filter.completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={word}\n          onChange={(event) => setWord(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className={classNames('delete',\n              {\n                'close-btn': word.length === 0,\n              })}\n            onClick={() => setWord('')}\n          />\n        </span>\n      </p>\n    </form>\n  );\n};\n","/* eslint-disable react/require-default-props */\n/* eslint-disable max-len */\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectors } from '../../store';\nimport { actions } from '../../store/currentTodo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  const dispatch = useDispatch();\n  const selectedTodo = useSelector(selectors.getTodo);\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr data-cy=\"todo\" key={todo.id}>\n            <td className=\"is-vcentered\">\n              {todo.id}\n            </td>\n            {todo.completed\n              ? (\n                <td className=\"is-vcentered\">\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </td>\n              ) : (\n                <td className=\"is-vcentered\" />\n              )}\n            <td className=\"is-vcentered is-expanded\">\n              <p className={todo.completed ? 'has-text-success' : 'has-text-danger'}>\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => dispatch(actions.selectTodo(todo))}\n              >\n                <span className=\"icon\">\n                  <i className={selectedTodo?.id === todo.id\n                    ? 'far fa-eye-slash'\n                    : 'far fa-eye'}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { actions } from '../../store/currentTodo';\nimport { selectors } from '../../store';\n\nexport const TodoModal: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [user, setUser] = useState<User>();\n\n  const dispatch = useDispatch();\n  const selectedTodo = useSelector(selectors.getTodo);\n\n  useEffect(() => {\n    if (selectedTodo) {\n      getUser(selectedTodo.userId).then(userInfo => {\n        setIsLoading(false);\n        setUser(userInfo);\n      });\n    }\n  }, []);\n\n  return (\n    <>\n      {selectedTodo && (\n        <div className=\"modal is-active\" data-cy=\"modal\">\n          <div className=\"modal-background\" />\n\n          {isLoading ? (\n            <Loader />\n          ) : (\n            <div className=\"modal-card\">\n              <header className=\"modal-card-head\">\n                <div\n                  className=\"modal-card-title has-text-weight-medium\"\n                  data-cy=\"modal-header\"\n                >\n                  {`Todo #${selectedTodo.id}`}\n                </div>\n\n                {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n                <button\n                  type=\"button\"\n                  className=\"delete\"\n                  data-cy=\"modal-close\"\n                  onClick={() => dispatch(actions.unselectTodo())}\n                />\n              </header>\n\n              <div className=\"modal-card-body\">\n                <p className=\"block\" data-cy=\"modal-title\">\n                  {selectedTodo.title}\n                </p>\n\n                <p className=\"block\" data-cy=\"modal-user\">\n                  {selectedTodo.completed\n                    ? <strong className=\"has-text-success\">Done</strong>\n                    : <strong className=\"has-text-danger\">Planned</strong>}\n\n                  {' by '}\n\n                  <a href=\"mailto:Sincere@april.biz\">\n                    {user?.name}\n                  </a>\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getTodos } from './api';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Loader } from './components/Loader';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoList } from './components/TodoList';\nimport { TodoModal } from './components/TodoModal';\nimport { Filter } from './Filter';\n\nimport { selectors } from './store';\nimport { Todo } from './types/Todo';\nimport { actions as loadingActions } from './store/loading';\n\nexport const App = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>([]);\n  const [selectFilter, setSelectFilter] = useState('all');\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const dispatch = useDispatch();\n  const isLoadedTodos = useSelector(selectors.isLoading);\n  const selectedTodo = useSelector(selectors.getTodo);\n\n  useEffect(() => {\n    getTodos().then(todoList => {\n      setTodos(todoList);\n      setVisibleTodos(todoList);\n      dispatch(loadingActions.startLoading());\n    });\n  }, []);\n\n  const findTitle = (title: string) => {\n    const params = searchQuery.toLowerCase();\n\n    return title.toLowerCase().includes(params);\n  };\n\n  const filteredTodos = todos.filter(todo => {\n    switch (selectFilter) {\n      case Filter.all:\n        return findTitle(todo.title);\n\n      case Filter.active:\n        return !todo.completed && findTitle(todo.title);\n\n      case Filter.completed:\n        return todo.completed && findTitle(todo.title);\n\n      default:\n        return todo;\n    }\n  });\n\n  useEffect(() => setVisibleTodos(filteredTodos), [searchQuery, selectFilter]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                onSaveOption={setSelectFilter}\n                onSaveQuery={setSearchQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {!isLoadedTodos\n                ? <Loader />\n                : <TodoList todos={visibleTodos} />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}